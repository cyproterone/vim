#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from asyncio import Queue, create_subprocess_exec, ensure_future, gather, run
from asyncio.subprocess import PIPE
from os import getcwd, makedirs
from os.path import basename, isdir, join, splitext
from sys import stderr, stdin
from typing import Set, Tuple, cast
from urllib.parse import urlparse

Triple = Tuple[int, str, str]


async def call(prog: str, *args: str, cwd=getcwd()) -> Triple:
    proc = await create_subprocess_exec(prog, *args, cwd=cwd, stdout=PIPE, stderr=PIPE)
    stdout, stderr = await proc.communicate()
    out, err = stdout.decode(), stderr.decode()
    code = cast(int, proc.returncode)
    return code, out, err


def expand_uri(line: str) -> str:
    repo = line.strip()
    if repo.startswith("https://"):
        return repo
    elif repo.startswith("git@"):
        return repo
    else:
        uri = f"https://github.com/{repo}.git"
        return uri


def p_name(uri: str) -> str:
    url = urlparse(uri)
    name = basename(url.path)
    target, _ = splitext(name)
    return target


async def install_pkg(chan: Queue[Triple], uri: str, location: str) -> None:
    install_target = join(location, p_name(uri))
    if isdir(install_target):
        ret = await call("git", "pull", cwd=install_target.encode())
        await chan.put(ret)
    else:
        ret = await call("git", "clone", "--depth=1", uri, install_target)
        await chan.put(ret)


async def print_msg(chan: Queue[Triple]) -> None:
    while True:
        code, out, err = await chan.get()
        print(out, end="")
        print(err, end="", file=stderr)
        if code != 0:
            exit(code)
        chan.task_done()


def parse_args() -> Namespace:
    parser = ArgumentParser()
    parser.add_argument("path")
    return parser.parse_args()


async def main() -> None:
    args = parse_args()
    makedirs(args.path, exist_ok=True)
    repos: Set[str] = {expand_uri(line) for line in stdin.readlines()}
    chan: Queue[Triple] = Queue(1)
    producers = (install_pkg(chan, repo, args.path) for repo in repos)
    consumer = ensure_future(print_msg(chan))
    await gather(*producers)
    await chan.join()
    consumer.cancel()


run(main())
